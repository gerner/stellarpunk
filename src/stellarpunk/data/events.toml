# Events
# object names here name specific trigger responses for a "type" of event

# some common top-level response keys:
# type: event type (this is in a global, well-known event space
# priority: priority of the trigger. lower value means higher priority. any 
#   given trigger will get at most one response per character candidate
# criteria: a list of criteria applied to the event/candidate context
#   criteria have a simple language:
#   a single string indicates a flag with a non-zero value
#   "$" indicates an entity context fetch, allowing access to further context
#     keys from that specific entity
#   flag values can be compared with a one or two sided range comparison
#     only "<=" is recognized. flag values are unsigned 64-bit ints.

# under the top level trigger response is a list of "actions" to take if the
# response is taken.
# common action keys:
# _action: the type of action to take (from global, well-known action space)
# _delay: how many game seconds to wait for the action to happen
# all other keys without a leading underscore are parameters for the action
#   these keys are action specific and not global/well-known


[help_start]
type = "start_game"
priority = 0
criteria = ["is_player"]
[[help_start.actions]]
_action = "player_notification"
message = "press \"?\" for help\ntype \":\" followed by \"help\" and press <ENTER> for more help"

# Tutorial Chain

# message on game start
[tutorial]
type = "start_game"
priority = 0
criteria = ["tutorial_guy"]
[[tutorial.actions]]
_action = "message"
_delay = 1.0
message_id = 0
subject = "Let's get to work"
message = "is this thing on?"
recipient = "_ref:tutorial_target_player"

# talking to tutorial guy for the first time
[tutorial_first_contact]
type = "contact"
priority = 1
criteria = ["tutorial_guy", "!$contacter.tutorial_skipped", "!$contacter.tutorial_started", "$contacter.tutorial_target_player"]
[[tutorial_first_contact.actions]]
_action = "dialog"
dialog_id = "tutorial_first_contact"

# player arrives at target asteroid
[tutorial_mining_arrive]
type = "docked"
priority = 1
criteria = ["tutorial_started", "$target.tutorial_asteroid", "!tutorial_mining_arrive"]
[[tutorial_mining_arrive.actions]]
_action = "message"
message_id = 0
subject = "Time to get mining"
message = "TBD"
sender = "_ref:tutorial_guy"
recipient = "_ref:tutorial_target_player"

# player mined enough of the target resource
[tutorial_mined_enough]
type = "mined"
priority = 1
criteria = ["tutorial_started", "!tutorial_mined", "!tutorial_delivered", "resource = tutorial_resource", "tutorial_amount_to_mine <= amount_on_hand"]
[[tutorial_mined_enough.actions]]
_action = "inc"
amount = 1
flag = "_ref:tutorial_mined"
[[tutorial_mined_enough.actions]]
_action = "message"
message_id = 0
subject = "Head on back"
message = "That's enough. Head on back to the station."
sender = "_ref:tutorial_guy"
recipient = "_ref:tutorial_target_player"

# player traded target resource and it's enough
# check this first
[tutorial_traded_resource]
type = "sold"
priority = 0
criteria = ["tutorial_started", "!tutorial_delivered", "resource = tutorial_resource", "tutorial_amount_to_trade <= amount"]
[[tutorial_traded_resource.actions]]
_action = "inc"
amount = 1
flag = "_ref:tutorial_delivered"
[[tutorial_traded_resource.actions]]
_action = "dec"
amount_ref = "_ref:amount"
flag = "_ref:tutorial_amount_to_trade"
[[tutorial_traded_resource.actions]]
_action = "message"
message_id = 0
subject = "All done"
message = "Great work, seems like you know what you're doing. TBD"
sender = "_ref:tutorial_guy"
recipient = "_ref:tutorial_target_player"

# player traded target resource and it's not enough
# keep track of total amount traded
[tutorial_traded_resource_not_enough]
type = "sold"
priority = 1
criteria = ["tutorial_started", "!tutorial_delivered", "resource = tutorial_resource"]
[[tutorial_traded_resource_not_enough.actions]]
_action = "dec"
amount_ref = "_ref:amount"
flag = "_ref:tutorial_amount_to_trade"

# Player event handlers

# player is in a sector during someone else's broadcast
[player_receive_broadcast]
type = "broadcast"
priority = 0
criteria = ["is_player"]
[[player_receive_broadcast.actions]]
_action = "player_receive_broadcast"

# someone sends the player a message
[player_receive_message]
type = "message"
priority = 0
criteria = ["is_player"]
[[player_receive_message.actions]]
_action = "player_receive_message"

# player contacts an NPC that has no other dialog, should trigger no-dialog UX
[player_contact]
type = "contact"
priority = 2
criteria = ["$contacter.is_player"]
[[player_contact.actions]]
_action = "dialog"


# Intel
# all of these are non-terminal with priority 0 so they always go off and do
# not interfer with other narrative event rules.

[intel_id_asteroid]
type = "sensors:identified"
priority = 1
group = "intel"
criteria = ["$target.generate:etype_asteroid"]
[[intel_id_asteroid.actions]]
_action = "intel:identify_asteroid"

#TODO: what about planets?
[intel_docked_station]
type = "docked"
priority = 1
group = "intel"
criteria = ["$target.generate:etype_station"]
[[intel_docked_station.actions]]
_action = "intel:witness_docking"

# fallback sector_entity_identification
[intel_id_sector_entity]
type = "sensors:identified"
priority = 2
group = "intel"
criteria = []
[[intel_id_sector_entity.actions]]
_action = "intel:identify_sector_entity"



#[player_open_dialog]
#type = "dialog"
#priority = 0
#criteria ["is_player"]
#[[player_open_dialog.actions]]
#_action = "player_open_dialog"

#[start_game_help]
#type = "start_game"
#criteria = ["is_player", "5 <= stuff <= 10", "4 <= $foo.bar <= 15", "$bar.baz = 21"]
#[[start_game_help.actions]]
#_action = "broadcast"
#message = "what up gang?"
#delay = 500
#[[start_game_help.actions]]
#_action = "message"
#message = "{recipient} how ya doin?"
#recipient = "PLAYER"
#sender = "CHARACTER"

#[event.start_game_help]
#criteria="!p.start_game_help & CMP(NOW > 1)"
#notification="press \"?\" or type \":\" then \"help\" and <ENTER> for help.\ntype \":\" then \"quit\" and <ENTER> to quit."

#[contact.contact_demo]
#criteria="p.event_demo"
#notification="awesome sauce"

#[event.tutorial_chain_intro]
#criteria="!p.tutorial_chain_intro & CMP(NOW > 1)"
#
#    [event.tutorial_chain_intro.context]
#    tutorial_guy="character:tutorial_guy.tutorial_chain"
#    tutorial_station="station:tutorial_station.tutorial_chain"
#
#    [event.tutoral_chain_intro.message]
#    from="tutorial_guy"
#    subject="Time to get started"
#    body="Come and talk to me on {tutorial_station.short_id()} so we can get you started working. Just look me up in the station directory."
#
#[contact.tutorial_chain_start]
#criteria="p.tutorial_chain_intro & !p.tutorial_chain_start"
#dialog="tutorial_chain_start"
#    [contact.tutorial_chain_start.context]
#    tutorial_station="station:tutorial_station.tutorial_chain"
#
#[event.tutorial_chain_mined]
#criteria="p.tutorial_chain_start & !p.tutorial_chain_asteroid & ship_has_enough_of_TBD_target_resource"
